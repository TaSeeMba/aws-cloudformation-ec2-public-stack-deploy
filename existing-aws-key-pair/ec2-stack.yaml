Description:  Deploys a highly available VPC with public and private subnets across two AZs,
  internet and NAT gateways, an EC2 instance with EFS storage, and an
  Application Load Balancer fronted by AWS WAF.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: demo-ec2

  KeyPairName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Default: demo-ec2-keypair

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  Ec2Ami:
    Description: AMI ID of EC2 instance
    Type: String
    Default: ami-09b024e886d7bbe74 # Amazon Linux AMI for eu-west-1

# Uncomment if you have an ACM certificate in the same region as the stack (for your domain), in ISSUED status
  # CertificateArn:
  #   Description: Arn of the SSL cert in ACM
  #   Type: String
  #   Default: "arn:aws:acm:eu-west-1:AccountID:certificate/UUID"

Resources:
#############
# VPC
#############
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-igw"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      # CidrBlock: !Select [0, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 0
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Public Subnet (AZ1)"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      # CidrBlock: !Select [1, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 1
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Public Subnet (AZ2)"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      # CidrBlock: !Select [2, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 2
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Subnet (AZ1)"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      # CidrBlock: !Select [3, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 3
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Subnet (AZ2)"

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Public Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Routes (AZ1)"

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Routes (AZ2)"

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

##################
# Security Groups
##################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB allowing inbound HTTP from public"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} ALB SecurityGroup"

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName : "ec2-sg"
      GroupDescription: "Enable SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0" # Update this to restrict access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Only allow traffic from the ALB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EC2 SecurityGroup"

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow NFS from EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EFS SecurityGroup"

########
# IAM
########
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemsUtils
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EC2 InstanceRole"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

########
# EFS
########
  EFS:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      Encrypted: true

  EFSMountTargetAz1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTargetAz2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

########
# EC2
########
  PublicInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - EFSMountTargetAz1
      - EFSMountTargetAz2
    Properties:
      InstanceType: t3.small
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !Ref Ec2Ami
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 40
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # --- Log everything to /var/log/user-data.log and console ---
          exec > >(tee -a /var/log/user-data.log) 2>&1

          # --- Install dependencies ---
          dnf -y update
          dnf -y install nginx tar amazon-efs-utils
          systemctl enable --now nginx

          # --- EFS mount ---
          FILE_SYSTEM_ID=${EFS}
          mkdir -p /mnt/efs

          # --- Mount with TLS; will no-op if already mounted ---
          if ! mountpoint -q /mnt/efs; then
            mount -t efs -o tls $FILE_SYSTEM_ID:/ /mnt/efs
          fi
          # --- Persist EFS mount across reboots ---
          if ! grep -q "^$FILE_SYSTEM_ID:/" /etc/fstab; then
            echo "$FILE_SYSTEM_ID:/ /mnt/efs efs _netdev,tls 0 0" >> /etc/fstab
          fi

          mkdir -p /mnt/efs/html

          # --- Web root ----
          WEBROOT=/usr/share/nginx/html
          mkdir -p "$WEBROOT"

          # --- Fetch 2048 source to a temp dir ---
          TMPDIR=$(mktemp -d)
          cd "$TMPDIR"
          curl -L -o 2048.tar.gz https://github.com/gabrielecirulli/2048/archive/refs/heads/master.tar.gz
          tar -xzf 2048.tar.gz

          # --- The archive extracts to a single top-level folder; detect it: ---
          SRC_DIR=$(tar -tzf 2048.tar.gz | head -1 | cut -f1 -d"/")
          [ -d "$SRC_DIR" ] || SRC_DIR="."

          # --- Clean the default placeholder index so it cannot shadow the game ---
          rm -f "$WEBROOT/index.html"

          # --- Seed EFS (first boot) and copy game files into efs location ---
          if [ ! -f /mnt/efs/html/index.html ]; then
            rsync -a --delete "$SRC_DIR"/ /mnt/efs/html/ || cp -a "$SRC_DIR"/. /mnt/efs/html/
          fi

          # --- Bind-mount EFS content over the NGINX web root (keeps your nginx.conf unchanged) ---
          if ! mountpoint -q "$WEBROOT"; then
            mount --bind /mnt/efs/html "$WEBROOT"
          fi
          # --- Persist bind mount ---
          if ! grep -q "/mnt/efs/html $WEBROOT none bind" /etc/fstab; then
            echo "/mnt/efs/html $WEBROOT none bind 0 0" >> /etc/fstab
          fi

          # Minimal nginx.conf (static site). Comment this block if you prefer distro defaults.
          cat >/etc/nginx/nginx.conf <<'NGINXCONF'
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          events { worker_connections 1024; }

          http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;
            sendfile      on;
            keepalive_timeout 65;

            server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;

              location / {
                try_files $uri $uri/ =404;
              }
            }
          }
          NGINXCONF
          
          # Test & reload NGINX
          nginx -t
          systemctl reload nginx

          # Cleanup
          rm -rf "$TMPDIR"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EC2 public"


#########################
# ALB and Target Group
#########################

# Target Group for ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref PublicInstance
      HealthCheckPath: "/"

# Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-alb"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2

# ALB Listener Http
  ALBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
# Uncomment below if you have HTTPS listener and you want to redirect all Http traffic to https
      #   - Type: redirect
      #     RedirectConfig:
      #       Protocol: "HTTPS"
      #       Port: "443"
      #       StatusCode: "HTTP_301"

# uncomment to enable an ACM certificate in the same region as the stack (for your domain), in ISSUED status
# ALB Listener HTTPS
  # ALBHttpsListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Protocol: HTTPS
  #     Port: 443
  #     Certificates:
  #       - CertificateArn: !Ref CertificateArn
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup

########
# WAF
########
  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${EnvironmentName}-web-acl"
      Scope: "REGIONAL"
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${EnvironmentName}-web-acl-metrics"
      Rules:
        - Name: RuleWithAWSManagedRules
          Priority: 0
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: DemoEC2RuleWithAWSManagedRulesMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules: []

# Associate WAF WebACL with ALB
  WAFWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref ApplicationLoadBalancer
      WebACLArn: !GetAtt WAFWebACL.Arn

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PublicRouteTable:
    Description: A reference to the public route table
    Value: !Ref PublicRouteTable

  PrivateRouteTable1:
    Description: A reference to the private route table  in the 1st Availability Zone
    Value: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Description: A reference to the private route table in the 2nd Availability Zone
    Value: !Ref PrivateRouteTable2

  LoadBalancerDNSName:
    Description: The DNS name for the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  LoadBalancerArn:
    Description: The Amazon Resource Name (ARN) of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerArn

  LoadBalancerSecurityGroups:
    Description: The IDs of the security groups for the load balancer
    Value: !Join [",", !GetAtt ApplicationLoadBalancer.SecurityGroups]