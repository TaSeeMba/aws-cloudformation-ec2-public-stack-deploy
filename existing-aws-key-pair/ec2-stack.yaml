Description:  EC2 stack. This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. It deploys an EC2 instance that is publicly exposed and all traffic is routed using an Application Load Balancer

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: demo-ec2

  KeyPairName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Default: demo-ec2-keypair

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  Ec2Ami:
    Description: AMI ID of EC2 instance
    Type: String
    Default: ami-09b024e886d7bbe74 # Amazon Linux AMI for eu-west-1

Resources:
#############
# VPC
#############
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-igw"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      # CidrBlock: !Select [0, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 0
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Public Subnet (AZ1)"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      # CidrBlock: !Select [1, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 1
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Public Subnet (AZ2)"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      # CidrBlock: !Select [2, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 2
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Subnet (AZ1)"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      # CidrBlock: !Select [3, !Split [",", !Ref QualifireSubnetCidrs]]
      CidrBlock: !Select
        - 3
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Subnet (AZ2)"

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Public Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Routes (AZ1)"

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Private Routes (AZ2)"

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

##################
# Security Groups
##################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB allowing inbound HTTP from public"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} ALB SecurityGroup"

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName : "ec2-sg"
      GroupDescription: "Enable SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0" # Update this to restrict access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Only allow traffic from the ALB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EC2 SecurityGroup"

########
# IAM
########
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemsUtils
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EC2 InstanceRole"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

########
# EFS
########
  EFS:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      Encrypted: true

  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EC2SecurityGroup

########
# EC2
########
  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !Ref Ec2Ami
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 40
            VolumeType: gp2
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          # Amazon Linux 2023
          dnf -y update
          dnf -y swap curl-minimal curl   # NOTE: AL2023 already has curl-minimal, replace with full curl
          dnf -y install nginx tar
          systemctl enable --now nginx

          # Web root
          WEBROOT=/usr/share/nginx/html
          mkdir -p "$WEBROOT"

          # Fetch 2048 source to a temp dir
          TMPDIR=$(mktemp -d)
          cd "$TMPDIR"
          # curl is provided by curl-minimal on AL2023
          curl -L -o 2048.tar.gz https://github.com/gabrielecirulli/2048/archive/refs/heads/master.tar.gz
          tar -xzf 2048.tar.gz

          # The archive extracts to a single top-level folder; detect it:
          SRC_DIR=$(tar -tzf 2048.tar.gz | head -1 | cut -f1 -d"/")
          [ -d "$SRC_DIR" ] || SRC_DIR="."

          # Clean the default placeholder index so it cannot shadow the game
          sudo rm -f "$WEBROOT/index.html"

          # Copy game files into the web root (overwrite if re-run)
          sudo rsync -a --delete "$SRC_DIR"/ "$WEBROOT"/ || cp -a "$SRC_DIR"/. "$WEBROOT"/

          # Minimal nginx.conf (static site). Comment this block if you prefer distro defaults.
          cat >/etc/nginx/nginx.conf <<'NGINXCONF'
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          events { worker_connections 1024; }

          http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;
            sendfile      on;
            keepalive_timeout 65;

            server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;

              location / {
                try_files $uri $uri/ =404;
              }
            }
          }
          NGINXCONF

          # Test & reload NGINX
          sudo nginx -t
          sudo systemctl reload nginx

          # Cleanup
          rm -rf "$TMPDIR"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} EC2 public"

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PublicRouteTable:
    Description: A reference to the public route table
    Value: !Ref PublicRouteTable

  PrivateRouteTable1:
    Description: A reference to the private route table  in the 1st Availability Zone
    Value: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Description: A reference to the private route table in the 2nd Availability Zone
    Value: !Ref PrivateRouteTable2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup